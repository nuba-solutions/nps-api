// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// For Local environment
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// For deployed project
// datasource db {
//     provider  = "postgresql"
//     url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//     directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Charge {
    id               Int             @id @unique @default(autoincrement())
    title            String
    description      String          @db.Text
    totalAmount      Float
    status           ChargeStatus    @default(open)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    dueDate          DateTime
    user             User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           Int?
    chargeItems      ChargeItem[]
    clientProvider   ClientProvider? @relation(fields: [clientProviderId], references: [id])
    clientProviderId Int?
}

model ChargeItem {
    id          Int      @id @unique @default(autoincrement())
    description String   @db.Text
    amount      Float
    createdAt   DateTime @default(now())
    Charge      Charge?  @relation(fields: [chargeId], references: [id], onDelete: Cascade)
    chargeId    Int?
}

model User {
    id                   Int              @id @unique @default(autoincrement())
    name                 String
    email                String           @unique
    password             String
    role                 Role             @default(USER)
    charges              Charge[]
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    theme                String?
    notificationsEnabled Boolean          @default(true)
    clientProviders      ClientProvider[]
    notifications        Notification[]
    stripeId             String
}

model ClientProvider {
    id     Int      @id @unique @default(autoincrement())
    name   String
    users  User[]
    Charge Charge[]
}

model Notification {
    id          Int      @id @unique @default(autoincrement())
    title       String
    description String
    createdAt   DateTime @default(now())
    User        User?    @relation(fields: [userId], references: [id])
    userId      Int?
}

enum Role {
    MASTER
    ADMIN
    USER
}

enum ChargeStatus {
    open
    paid
    pending
    deleted
}
