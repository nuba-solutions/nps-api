// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// For Local environment
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// For deployed project
// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  refresh_expires_in Int?
  not_before_policy  Int?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String  @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Charge {
  id               Int             @id @unique @default(autoincrement())
  title            String
  description      String          @db.Text
  totalAmount      Float
  status           ChargeStatus    @default(open)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  dueDate          DateTime
  user             User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?
  chargeItems      ChargeItem[]
  clientProvider   ClientProvider? @relation(fields: [clientProviderId], references: [id])
  clientProviderId Int?
}

model ChargeItem {
  id          Int      @id @unique @default(autoincrement())
  description String   @db.Text
  amount      Float
  createdAt   DateTime @default(now())
  Charge      Charge?  @relation(fields: [chargeId], references: [id], onDelete: Cascade)
  chargeId    Int?
}

model User {
  id                   String  @id @default(cuid())
  name                 String
  email                String           @unique
  password             String?
  role                 Role             @default(USER)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  theme                String?
  notificationsEnabled Boolean          @default(true)
  emailVerified        DateTime?        @map("email_verified")
  image                String?
  accounts             Account[]
  charges              Charge[]
  clientProviders      ClientProvider[]
  notifications        Notification[]
  sessions             Session[]
  stripeId             String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ClientProvider {
  id     Int      @id @unique @default(autoincrement())
  name   String
  users  User[]
  Charge Charge[]
}

model Notification {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  userId      String?
  User        User?    @relation(fields: [userId], references: [id])
}

enum Role {
  MASTER
  ADMIN
  USER
}

enum ChargeStatus {
    open
    paid
    pending
    deleted
}
